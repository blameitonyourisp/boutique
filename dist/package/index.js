class t{constructor(t){this.events={},this.state=t}createRedaction(t){const{state:e,tracer:s}=this.proxy;return r=>this.redact(s,t(e,r))}createRedactionListener(t){const{state:e,tracer:s}=this.proxy;return t(e),{func:s=>t(e)(s),deps:s.filter((t=>t.trim))}}addRedactionListener(t){t.deps.forEach((e=>{this.events[e]=[...this.events[e]||[],t]}))}removeRedactionListener(t){t.deps.forEach((e=>{this.events[e]=this.events[e].filter((e=>e!==t))}))}redact(t,e,s=[]){e&&(t.forEach((t=>{let e=this.state;t[0].split(".").slice(1).reduce(((r,n,c,i)=>n?(c!==i.length-1?e=e[n]||{}:e[n]=t[1],r=`${r}.${n}`,s.push(...this.events[r]||[]),r):r),"")})),[...new Set(s)].forEach((t=>t.func(e))))}handler(t,e=""){return{get:(s,r)=>{const n=`${e}.${r}`;""!==e?t.splice(-1,1,n):t.push(n);const c=s[r];return"object"!=typeof c?c:new Proxy(c,this.handler(t,n))},set:(s,r,n)=>!!t.push([`${e}.${r}`,n])}}get proxy(){const t=[];return{state:new Proxy(this.state,this.handler(t)),tracer:t}}}export{t as Boutique};
